#I "bin/Release"
#r "Logary.dll"
#r "NodaTime.dll"
#r "Hopac.Core.dll"
#r "Hopac.dll"
#load "WinPerfCounter.fs"

open System
open System.IO
open System.Text.RegularExpressions
open Logary.Metrics
open Logary.Metrics.WinPerfCounter

let munge name =
  Regex.Replace(name, "[\./,]", "_")

let gen () =

  let genComment (pcc : Category) (perfCounter : WinPerfCounter) =
    sprintf
        "/// %s: %s
///
/// %s"
      pcc.CategoryName
      pcc.CategoryHelp
      (match perfCounter.instance with
      | None -> "This performance counter does not have instance based counters"
      | _    -> "This performance counter does not have non-instance based counters")

  let genModuleHeader (pcc : Category) =
    sprintf """module ``%s`` =

  [<Literal>]
  let CategoryName = "%s"

  let PCC = Category.create CategoryName"""
      (munge pcc.CategoryName)
      pcc.CategoryName

  let genCounter (pc : WinPerfCounter) =
    match WinPerfCounter.toWindowsCounter pc with
    | Some osPC when pc.instance = None ->
      sprintf """  /// %s: %s
  let ``%s`` =
    %s"""
        pc.counter (osPC.CounterHelp.Trim()) pc.counter
        (sprintf """{ category = CategoryName; counter = "%s"; instance = None }""" pc.counter)
    | mOsPc ->
      let help =
        match mOsPc with
        | None -> "-"
        | Some osPC -> osPC.CounterHelp.Trim()

      sprintf """  /// %s: %s
  let ``%s`` instance =
    %s"""
        pc.counter help pc.counter
        (sprintf """{ category = CategoryName; counter = "%s"; instance = instance }""" pc.counter)

  let genCounters (counters : WinPerfCounter list) =
    counters
    |> List.map genCounter
    |> List.filter (not << String.IsNullOrWhiteSpace)
    |> fun ctrs -> String.Join("\n", ctrs)

  let genListing (counters : WinPerfCounter list) =
    match counters with
    | [] -> """  let allCounters = []"""
    | hc :: rest ->
      sprintf """
  let allCounters =
    [| ``%s``
%s
    |]"""
        hc.counter
        (rest
          |> List.map (fun { counter = c } -> "``" + c + "``")
          |> List.map (fun s -> "       " + s)
          |> fun ss -> String.Join("\n", ss))

  let genFileHeader () =
    """/// Copyright Henrik Feldt 2016. Part of the Logary source code.
/// An autogenerated file with all performance counters found on a Windows 10 system
module Logary.Metrics.AllWinPerfCounters

open System
open System.Diagnostics
open Logary.Metrics
open Logary.Metrics.WinPerfCounter"""

  Category.list ()
  |> Array.map (fun pcc -> pcc, Category.instances pcc)
  |> Array.sortBy (fun (pcc, _) -> pcc.CategoryName)
  |> Array.map (function
    | pcc, [||]      -> pcc, WinPerfCounter.list pcc None
    | pcc, instances -> pcc, WinPerfCounter.list pcc (Array.head instances))
  |> Array.map (fun (pcc, counters) ->
    pcc, counters |> Array.sortBy (fun x -> x.counter))
  |> Array.map (function
    | pcc, [||]     -> ""
    | pcc, counters ->
      let c = Array.head counters
      let counters = counters |> Seq.distinct |> List.ofSeq
      genComment pcc c + "\n"
      + (genModuleHeader pcc) + "\n"
      + (genCounters counters) + "\n"
      + (genListing counters) + "\n")
  |> fun modules ->
    genFileHeader () + "\n"
    + String.Join("\n", modules)

let write () =
  let contents = gen ()
  let path = Path.Combine(__SOURCE_DIRECTORY__, "WinPerfCounters.fs")
  printfn "writing to path '%s'" path
  File.WriteAllText(path, contents, System.Text.Encoding.UTF8)

/// SynchronizationNuma: A nice help text
///
/// This performance counter does not have non-instance based counters
module ``SynchronizationNuma Example`` =

  [<Literal>]
  let CategoryName = "SynchronizationNuma"

  let PCC = Category.create CategoryName

  let instances () =
    PCC |> Option.fold (fun s pcc -> Category.instances pcc) Array.empty

  let ``Exec. Resource no-Waits AcqShrdWaitForExcl/sec`` instance =
    toWindowsCounter3 CategoryName "Exec. Resource no-Waits AcqShrdWaitForExcl/sec" instance

  let ``Exec. Resource Boost Excl. Owner/sec`` instance =
    toWindowsCounter3 CategoryName "Exec. Resource Boost Excl. Owner/sec" instance

  // etc

  let allCounters =
    [ ``Exec. Resource no-Waits AcqShrdWaitForExcl/sec``
      ``Exec. Resource Boost Excl. Owner/sec``
      // etc
    ]

  let countersFor instance =
    allCounters
    |> List.map (fun f -> f instance)
    |> List.filter Option.isSome
    |> List.map Option.get

/// System: a nice help text here too
///
/// This performance counter does not have instance based counters
module ``System Example`` =

  [<Literal>]
  let CategoryName = "System"

  let PCC = Category.create CategoryName

  let ``File Read Operations/sec`` =
    { category = CategoryName; counter = "File Read Operations/sec"; instance = None }

  // etc

  let allCounters =
    [| ``File Read Operations/sec`` |]

//#load "WinPerfCounters.fs"
//Logary.WinPerfCounters.``WorkflowServiceHost 4_0_0_0``.``Workflows Created`` NotApplicable
